Create database Zomato;
use Zomato;

drop table if exists goldusers_signup;
CREATE TABLE goldusers_signup (
    userid INTEGER,
    gold_signup_date DATE
); 

INSERT INTO goldusers_signup(userid,gold_signup_date) 
 VALUES (1,'2017-09-22'),
(3,'2017-04-21');

drop table if exists users;
CREATE TABLE users (
    userid INTEGER,
    signup_date DATE
); 

INSERT INTO users(userid,signup_date) 
 VALUES (1,'2014/09/02/'),
(2,'2015/01/15/'),
(3,'2014/04/11/');

drop table if exists sales;
CREATE TABLE sales (
    userid INTEGER,
    created_date DATE,
    product_id INTEGER
); 

INSERT INTO sales(userid,created_date,product_id) 
 VALUES (1,'2017-04-19-',2),
(3,'2019-12-18',1),
(2,'2020-07-20',3),
(1,'2019-10-23',2),
(1,'2018-03-19-',3),
(3,'2016-12-20-',2),
(1,'2016-11-09-',1),
(1,'2016-05-20',3),
(2,'2017-09-24',1),
(1,'2017-03-11',2),
(1,'2016-03-11',1),
(3,'2016-11-10',1),
(3,'2017-12-07',2),
(3,'2016-12-15',2),
(2,'2017-11-08',2),
(2,'2018-09-10',3);


drop table if exists product;
CREATE TABLE product (
    product_id INTEGER,
    product_name TEXT,
    price INTEGER
); 

INSERT INTO product(product_id,product_name,price) 
 VALUES
(1,'p1',980),
(2,'p2',870),
(3,'p3',330);

SELECT 
    *
FROM
    product;
SELECT 
    *
FROM
    sales;
SELECT 
    *
FROM
    users;
SELECT 
    *
FROM
    goldusers_signup;

-- 1) what is the total amount each customer spend on zomato?

SELECT 
    userid, SUM(price)
FROM
    sales x
        INNER JOIN
    product y ON x.product_id = y.product_id
GROUP BY userid;

-- 2) how many days has each customer visited zomato?

SELECT 
    COUNT(DISTINCT created_date), userid
FROM
    sales
GROUP BY userid;

-- 3) what was the first product purchased by each customer?

select z.* from (
select x.userid, x.created_date, y.product_id,
rank() over(partition by userid order by created_date ) as date_rank from sales x
join product y
on x.product_id=y.product_id) as z
where date_rank=1;

-- 4) what is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT 
    userid, COUNT(product_id)
FROM
    sales
WHERE
    product_id = (SELECT 
            product_id
        FROM
            sales
        GROUP BY userid
        ORDER BY COUNT(product_id) DESC
        LIMIT 1)
GROUP BY userid;

-- 5) which item was the most popular for each customer?
select * from (
select *, rank() over(partition by userid order by cnt desc) as rnk from
(select userid, product_id,count(product_id) as cnt  from sales
group by userid, product_id) z)b
where rnk=1;


-- 6) which item was purchased first by the customer after they became a member?

SELECT 
    *
FROM
    sales;

SELECT 
    x.userid, x.gold_signup_date, y.created_date, y.product_id
FROM
    goldusers_signup x
        INNER JOIN
    sales y ON x.userid = y.userid;


SELECT 
    *
FROM
    product;
SELECT 
    *
FROM
    sales;
SELECT 
    *
FROM
    users;
SELECT 
    *
FROM
    goldusers_signup;


select * from 
(select z.*, 
rank() over(partition by userid order by created_date Asc) as rnk from 
(select x.gold_signup_date, y.userid, y.product_id, y.created_date from goldusers_signup x
inner join sales y
on x.userid=y.userid
and  y.created_date>=x.gold_signup_date) z)d
where rnk=1;

-- 7) which item was purchased just beofre the customer became a member?

select * from 
(select z.*, rank() over(partition by userid order by created_date desc) as rnk from 
(select x.userid,x.gold_signup_date, y.created_date, y.product_id from goldusers_signup x
inner join sales y
on x.userid=y.userid and x.gold_signup_date<y.created_date) z) a
where rnk=1;

-- 8)what is the total orders and amount spent for each member before they became member?

SELECT 
    userid, COUNT(created_date), SUM(price)
FROM
    (SELECT 
        z.*, d.price
    FROM
        (SELECT 
        x.userid, x.created_date, x.product_id, y.gold_signup_date
    FROM
        sales x
    INNER JOIN goldusers_signup y ON x.userid = y.userid
        AND x.created_date <= y.gold_signup_date) z
    INNER JOIN product d ON z.product_id = d.product_id) a
GROUP BY userid;

9)if buying each product generates points for eg 5rs=2 zomato point and each product has different
purchasing points ef for p1 5rs=1 zomato point, for p2 10rs=5 zomato points and p3 5rs=1 zomato points
calculate points collected by each customer and for which product most points have been given till now.

SELECT 
    userid, SUM(total_points) * 2.5 AS total_points
FROM
    (SELECT 
        b.*, ROUND(spent / points, 0) AS total_points
    FROM
        (SELECT 
        a.*,
            CASE
                WHEN product_id = 1 THEN 5
                WHEN product_id = 2 THEN 2
                WHEN product_id = 3 THEN 5
                ELSE 0
            END AS points
    FROM
        (SELECT 
        userid, product_id, SUM(price) AS spent
    FROM
        (SELECT 
        x.userid, x.created_date, x.product_id, y.price
    FROM
        sales x
    INNER JOIN product y ON x.product_id = y.product_id) z
    GROUP BY userid , product_id) a) b) c
GROUP BY userid
ORDER BY total_points DESC
;
select d.* from(
select d.*, rank() over(order by total_points Desc) as rnk from 
(SELECT 
    product_id,sum(total_points) as total_points
FROM
    (SELECT 
        b.*, ROUND(spent / points, 0) AS total_points
    FROM
        (SELECT 
        a.*,
            CASE
                WHEN product_id = 1 THEN 5
                WHEN product_id = 2 THEN 2
                WHEN product_id = 3 THEN 5
                ELSE 0
            END AS points
    FROM
        (SELECT 
        userid, product_id, SUM(price) AS spent
    FROM
        (SELECT 
        x.userid, x.created_date, x.product_id, y.price
    FROM
        sales x
    INNER JOIN product y ON x.product_id = y.product_id) z
    GROUP BY userid , product_id) a) b) c
GROUP BY product_id) d) where rnk=1;

SELECT 
    c.*, z.price * .5
FROM
    (SELECT 
        x.userid, x.created_date, x.product_id, y.gold_signup_date
    FROM
        sales x
    INNER JOIN goldusers_signup y ON x.userid = y.userid
        AND created_date > gold_signup_date
        AND created_date <= y.gold_signup_date + INTERVAL 1 YEAR) c
        INNER JOIN
    product Z ON z.product_id = c.product_id;


-- 10 rank all the transactions of the customers?
select *, rank() over(partition by userid order by created_date asc)  from sales;

-- 11 find all the transactions for each member whenever they are a zomato gold member for every non gold member transactions mark as na?

SELECT 
    *
FROM
    product;
SELECT 
    *
FROM
    sales;
SELECT 
    *
FROM
    users;
SELECT 
    *
FROM
    goldusers_signup;

select a.*, case 
when  rnk = 0 then 'na'
else rnk
end

from (
select z.*,case when gold_signup_date is null then 0 else rank() over(partition by userid order by created_date Desc) end as rnk from 
(select x.userid,x.gold_signup_date,y.created_date,y.product_id from  sales y
left join  goldusers_signup x
on x.userid=y.userid and created_date>=gold_signup_date) z) a;





